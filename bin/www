#!/usr/bin/env node
let app = require('../app');
let cluster = require('cluster');
let debug = require('debug')('demol-nextgen:server');
let http = require('http');

const port = normalizePort(process.env.PORT || '3000');
const processCount = normalizePort(process.env.PROC_COUNT || 2);

if (cluster.isMaster) {
  // Count the machine's CPUs
  let cpuCount = require('os').cpus().length;
  cpuCount = cpuCount < processCount ? cpuCount : processCount;

  // Create a worker for each CPU
  for (let i = 0; i < cpuCount; i += 1) {
    cluster.fork();
  }
} else {
  let server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  console.log("Server started.");
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}